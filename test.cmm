/* Compute square root of N using bisection algorithm. */

int N, low, high;

void update( )
{ int mid;
  mid=(low+high)/2;
  if (mid*mid<=N) low=mid; else high=mid;
}

void main( )
{ scan(N);
  low=0;
  high=N+1;
  while (high-low>1) update( );
  print(low);
}

/*   this program
     illustrates evaluation of 
     arithmetic and boolean
     expressions
*/
void main( ) {
	int m,n,p;
	bool a,b,c;
	scan(m);
	print(m);
	scan(n);
	print(n);
	p=-m-3+n/2*(-5+m*n%4);
	print(p);
	a=m>n || n>=p;
	if (a) print(1); else print(0);
	b=m<n && n<=p;
	if (b==true) print(1); else print(0);
	c=a && !b || !a && b;
	if (c!=false) print(1); else print(0);	
}

	void Factorial /* recursive function */ (int n, int& result)	
		{ if (n==0) result=1; else {int temp; Factorial(n-1,temp); result=temp*n;} }

	int input,output;

	void main( ) {
		scan(input);
		Factorial(input, output);
		print(output);
	}

/* example program with a stack represented as an array */

int stack[10], top;

void initialize() {
	top=-1;
}

void push (int value) {
	if (top<9) {
		top=top+1;
		stack[top]=value;
	}
}

void pop(int& value) {
	if (top>=0) {
		value=stack[top];
		top=top-1;
	}
        else 
		value=0;
}

void main() {            /* the main function */
	int k;
	initialize();
	k=1;
	while (k<=1024) {
		push(k);
		k=k*2;
	}
	while(top>=0) {
		pop(k);
		print(k);
	}
}

/* end of the program */
